#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Nov 26, 2020 10:05:58 AM IST  platform: Linux

import sys
import mysql.connector


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Customer_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    Customer_support.set_Tk_var()
    top = Toplevel1 (root)
    Customer_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    Customer_support.set_Tk_var()
    top = Toplevel1 (w)
    Customer_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def runQuery(self):
        try:
            query = str(self.Text1.get('1.0', 'end'))
            self.mycursor.execute(query)

            myresult = self.mycursor.fetchall()
            self.ResultBox.delete(0, self.ResultBox.size())

            for i in range(len(myresult)):
                self.ResultBox.insert(i, myresult[i])

        except Exception:
            print("Error in Running Query")

    def deleteEntry(self):
        try:
            custid = self.Entry_CustID.get()
            query = "delete from T13_CUSTOMER c where c.CUST_Id = '"+str(custid)+"'"
            self.mycursor.execute(query)
            self.mydb.commit()
        except Exception:
            print("Error in deleting entry")

    def MaleSelected(self):
        self.gender = "M"

    def FemaleSelected(self):
        self.gender = "F"

    def addDetails(self):
        try:
            custId = self.Entry_CustID.get()
            fName = self.Entry_FName.get()
            lName = self.Entry_LName.get()
            dob = self.Entry_DOB.get()
            gender = self.gender
            address = self.Entry_Address.get()
            phone = self.Entry_PhNo.get()
            email = self.Entry_Email.get()
            passport = self.Entry_PassNo.get()
            marital = self.Entry_MaritalStatus.get()
            pps = self.Entry_PPS.get()

            sqlform = "Insert into T13_CUSTOMER values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
            customerData = [(custId, fName, lName, dob, gender, address, phone, email, passport, marital, pps)]
            self.mycursor.executemany(sqlform, customerData)
            self.mydb.commit()

        except Exception:
            print("Error in Adding details")


    def showData(self):
        try:
            self.mycursor.execute("select * from T13_CUSTOMER")
            myresult = self.mycursor.fetchall()

            self.ResultBox.delete(0, self.ResultBox.size())

            for i in range(len(myresult)):
                self.ResultBox.insert(i, myresult[i])


        except Exception:
            print("Error fetching result from database")

    def __init__(self, top=None):
        try:
            self.mydb = mysql.connector.connect(host="localhost", user="root", passwd="rahulp99",
                                           auth_plugin='mysql_native_password', database="T13_INSURANCE_COMPANY")

           # self.mydb = mysql.connector.connect(host="sql12.freemysqlhosting.net", user="sql12378600", passwd="rahulp99", auth_plugin='mysql_native_password', port=3306)

            self.mycursor = self.mydb.cursor()
        except Exception:
            print("Error connecting to database")
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1308x704+57+26")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1,  1)
        top.title("Customer Details")

        self.var = tk.IntVar()
        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.021, rely=0.067, relheight=0.364
                , relwidth=0.959)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.008, rely=0.035, height=29, width=99)
        self.Label1.configure(text='''Customer Id:''')

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.008, rely=0.324, height=20, width=99)
        self.Label2.configure(text='''(yyyy-mm-dd)''')

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.781, rely=0.035, height=29, width=77)
        self.Label3.configure(text='''Gender:''')

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.542, rely=0.254, height=28, width=77)
        self.Label4.configure(text='''Address:''')

        self.Label5 = tk.Label(self.Frame1)
        self.Label5.place(relx=0.247, rely=0.035, height=29, width=109)
        self.Label5.configure(text='''First Name:''')

        self.Label6 = tk.Label(self.Frame1)
        self.Label6.place(relx=0.008, rely=0.254, height=19, width=108)
        self.Label6.configure(text='''Date of Birth:''')

        self.Label7 = tk.Label(self.Frame1)
        self.Label7.place(relx=0.518, rely=0.035, height=29, width=119)
        self.Label7.configure(text='''Last Name:''')

        self.Label8 = tk.Label(self.Frame1)
        self.Label8.place(relx=0.51, rely=0.469, height=29, width=109)
        self.Label8.configure(text='''Marital Status:''')

        self.Label9 = tk.Label(self.Frame1)
        self.Label9.place(relx=0.008, rely=0.469, height=29, width=57)
        self.Label9.configure(text='''Email:''')

        self.Label10 = tk.Label(self.Frame1)
        self.Label10.place(relx=0.239, rely=0.254, height=28, width=109)
        self.Label10.configure(text='''Phone Number:''')

        self.Label11 = tk.Label(self.Frame1)
        self.Label11.place(relx=0.247, rely=0.469, height=29, width=97)
        self.Label11.configure(text='''Passport No.:''')

        self.Entry_CustID = tk.Entry(self.Frame1)
        self.Entry_CustID.place(relx=0.088, rely=0.035, height=33
                , relwidth=0.108)
        self.Entry_CustID.configure(background="white")
        self.Entry_CustID.configure(font="TkFixedFont")
        self.Entry_CustID.configure(textvariable=Customer_support.Varchar)

        self.Entry_FName = tk.Entry(self.Frame1)
        self.Entry_FName.place(relx=0.327, rely=0.035, height=33, relwidth=0.132)

        self.Entry_FName.configure(background="white")
        self.Entry_FName.configure(font="TkFixedFont")

        self.Entry_LName = tk.Entry(self.Frame1)
        self.Entry_LName.place(relx=0.598, rely=0.035, height=33, relwidth=0.14)
        self.Entry_LName.configure(background="white")
        self.Entry_LName.configure(font="TkFixedFont")

        self.selectMale = tk.Radiobutton(self.Frame1)
        self.selectMale.place(relx=0.837, rely=0.035, relheight=0.121
                , relwidth=0.053)
        self.selectMale.configure(justify='left')
        self.selectMale.configure(text='''Male''')
        self.selectMale.configure(variable=self.var, value=1, command=self.MaleSelected)


        self.selectFemale = tk.Radiobutton(self.Frame1)
        self.selectFemale.place(relx=0.892, rely=0.035, relheight=0.121
                , relwidth=0.076)
        self.selectFemale.configure(justify='left')
        self.selectFemale.configure(text='''Female''')
        self.selectFemale.configure(variable=self.var, value=2, command=self.FemaleSelected)

        self.Entry_DOB = tk.Entry(self.Frame1)
        self.Entry_DOB.place(relx=0.088, rely=0.254, height=33, relwidth=0.108)
        self.Entry_DOB.configure(background="white")
        self.Entry_DOB.configure(font="TkFixedFont")

        self.Entry_PhNo = tk.Entry(self.Frame1)
        self.Entry_PhNo.place(relx=0.327, rely=0.254, height=33, relwidth=0.132)
        self.Entry_PhNo.configure(background="white")
        self.Entry_PhNo.configure(font="TkFixedFont")

        self.Entry_Address = tk.Entry(self.Frame1)
        self.Entry_Address.place(relx=0.598, rely=0.254, height=33
                , relwidth=0.379)
        self.Entry_Address.configure(background="white")
        self.Entry_Address.configure(font="TkFixedFont")

        self.Entry_Email = tk.Entry(self.Frame1)
        self.Entry_Email.place(relx=0.048, rely=0.469, height=33, relwidth=0.164)

        self.Entry_Email.configure(background="white")
        self.Entry_Email.configure(font="TkFixedFont")

        self.Entry_PassNo = tk.Entry(self.Frame1)
        self.Entry_PassNo.place(relx=0.327, rely=0.469, height=33
                , relwidth=0.132)
        self.Entry_PassNo.configure(background="white")
        self.Entry_PassNo.configure(font="TkFixedFont")

        self.Entry_MaritalStatus = tk.Entry(self.Frame1)
        self.Entry_MaritalStatus.place(relx=0.598, rely=0.469, height=33
                , relwidth=0.14)
        self.Entry_MaritalStatus.configure(background="white")
        self.Entry_MaritalStatus.configure(font="TkFixedFont")

        self.Label12 = tk.Label(self.Frame1)
        self.Label12.place(relx=0.781, rely=0.473, height=28, width=80)
        self.Label12.configure(text='''PPS No.:''')

        self.Entry_PPS = tk.Entry(self.Frame1)
        self.Entry_PPS.place(relx=0.837, rely=0.473, height=33, relwidth=0.14)
        self.Entry_PPS.configure(background="white")
        self.Entry_PPS.configure(font="TkFixedFont")

        self.btnShow = tk.Button(self.Frame1)
        self.btnShow.place(relx=0.271, rely=0.703, height=41, width=141)
        self.btnShow.configure(command=self.showData,text='''Show Data''')

        self.btnAdd = tk.Button(self.Frame1)
        self.btnAdd.place(relx=0.438, rely=0.703, height=41, width=141)
        self.btnAdd.configure(command=self.addDetails,text='''Add Entry''')

        self.btnDelete = tk.Button(self.Frame1)
        self.btnDelete.place(relx=0.59, rely=0.703, height=41, width=141)
        self.btnDelete.configure(command=self.deleteEntry,text='''Delete Entry''')

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.894, rely=0.469, height=41, width=111)
        self.Button1.configure(command=self.runQuery,text='''Button''')

        self.ResultBox = tk.Listbox(top)
        self.ResultBox.place(relx=0.015, rely=0.582, relheight=0.392
                , relwidth=0.965)
        self.ResultBox.configure(background="white")
        self.ResultBox.configure(font="TkFixedFont")

        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.023, rely=0.455, relheight=0.105, relwidth=0.862)

        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(selectbackground="blue")
        self.Text1.configure(selectforeground="white")
        self.Text1.configure(wrap="word")

if __name__ == '__main__':
    vp_start_gui()





